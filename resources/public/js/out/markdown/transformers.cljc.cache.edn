{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name markdown.transformers, :imports nil, :requires {string clojure.string, clojure.string clojure.string, markdown.links markdown.links, markdown.lists markdown.lists, markdown.tables markdown.tables, markdown.common markdown.common}, :cljs.spec/speced-vars [], :uses {italics markdown.common, separator markdown.common, make-heading markdown.common, dashes markdown.common, thaw-strings markdown.common, inhibit markdown.common, implicit-reference-link markdown.links, bold markdown.common, freeze-string markdown.common, footnote-link markdown.links, escape-code markdown.common, table markdown.tables, strong markdown.common, li markdown.lists, reference-link markdown.links, image-reference-link markdown.links, em markdown.common, escaped-chars markdown.common, inline-code markdown.common, strikethrough markdown.common, bold-italic markdown.common, link markdown.links, escape-inhibit-separator markdown.common, image markdown.links}, :defs {h2? {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 41, :column 7, :end-line 41, :end-column 10, :arglists (quote ([text]))}, :name markdown.transformers/h2?, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 10, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, *formatter* {:name markdown.transformers/*formatter*, :file "resources/public/js/out/markdown/transformers.cljc", :line 31, :column 1, :end-line 31, :end-column 31, :dynamic true, :declared true, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 31, :column 20, :end-line 31, :end-column 31, :dynamic true, :declared true}}, paragraph {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 155, :column 7, :end-line 155, :end-column 16, :arglists (quote ([text state]))}, :name markdown.transformers/paragraph, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 16, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, close-paragraph {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 150, :column 7, :end-line 150, :end-column 22, :arglists (quote ([text {:keys [next-line paragraph], :as state}]))}, :name markdown.transformers/close-paragraph, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 22, :method-params ([text p__32017]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [next-line paragraph], :as state}]))}, blockquote-1 {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 230, :column 7, :end-line 230, :end-column 19, :arglists (quote ([text {:keys [eof code codeblock lists], :as state}])), :doc "Check for blockquotes and signal to blockquote-2 function with\n  states blockquote-start and blockquote-end so that tags can be added.\n  This approach enables lists to be included in blockquotes."}, :name markdown.transformers/blockquote-1, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 19, :method-params ([text p__32031]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 230, :end-line 230, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [eof code codeblock lists], :as state}])), :doc "Check for blockquotes and signal to blockquote-2 function with\n  states blockquote-start and blockquote-end so that tags can be added.\n  This approach enables lists to be included in blockquotes."}, heading {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 67, :column 7, :end-line 67, :end-column 14, :arglists (quote ([text {:keys [buf next-line code codeblock heading-anchors], :as state}]))}, :name markdown.transformers/heading, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 14, :method-params ([text p__31997]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [buf next-line code codeblock heading-anchors], :as state}]))}, superscript {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 50, :column 7, :end-line 50, :end-column 18, :arglists (quote ([text state]))}, :name markdown.transformers/superscript, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 18, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, autourl-transformer {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 90, :column 7, :end-line 90, :end-column 26, :arglists (quote ([text {:keys [code frozen-strings], :as state}]))}, :name markdown.transformers/autourl-transformer, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 26, :method-params ([text p__32004]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [code frozen-strings], :as state}]))}, h1? {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 38, :column 7, :end-line 38, :end-column 10, :arglists (quote ([text]))}, :name markdown.transformers/h1?, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 10, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, codeblock {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 178, :column 7, :end-line 178, :end-column 16, :arglists (quote ([text {:keys [codeblock codeblock-end indented-code next-line lists], :as state}]))}, :name markdown.transformers/codeblock, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 16, :method-params ([text p__32024]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [codeblock codeblock-end indented-code next-line lists], :as state}]))}, flatten-metadata {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 307, :column 7, :end-line 307, :end-column 23, :arglists (quote ([metadata])), :doc "Given a list of maps which contain a single key/value, flatten them all into\n  a single map with all the leading spaces removed. If an empty list is provided\n  then return nil."}, :name markdown.transformers/flatten-metadata, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 23, :method-params ([metadata]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 307, :end-line 307, :max-fixed-arity 1, :fn-var true, :arglists (quote ([metadata])), :doc "Given a list of maps which contain a single key/value, flatten them all into\n  a single map with all the leading spaces removed. If an empty list is provided\n  then return nil."}, hr {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 219, :column 7, :end-line 219, :end-column 9, :arglists (quote ([text state]))}, :name markdown.transformers/hr, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 9, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, transformer-vector {:name markdown.transformers/transformer-vector, :file "resources/public/js/out/markdown/transformers.cljc", :line 341, :column 1, :end-line 341, :end-column 24, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 341, :column 6, :end-line 341, :end-column 24}, :tag cljs.core/IVector}, autoemail-transformer {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 102, :column 7, :end-line 102, :end-column 28, :arglists (quote ([text state]))}, :name markdown.transformers/autoemail-transformer, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 28, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, parse-metadata-line {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 293, :column 7, :end-line 293, :end-column 26, :arglists (quote ([line])), :doc "Given a line of metadata header text return either a list containing a parsed\n  and normalizd key and the original text of the value, or if no header is found\n  (this is a continuation or new value from a pervious header key) simply\n  return the text. If a blank or invalid line is found return nil."}, :name markdown.transformers/parse-metadata-line, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 26, :method-params ([line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 293, :end-line 293, :max-fixed-arity 1, :fn-var true, :arglists (quote ([line])), :doc "Given a line of metadata header text return either a list containing a parsed\n  and normalizd key and the original text of the value, or if no header is found\n  (this is a continuation or new value from a pervious header key) simply\n  return the text. If a blank or invalid line is found return nil."}, blockquote-2 {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 262, :column 7, :end-line 262, :end-column 19, :arglists (quote ([text {:keys [blockquote-start blockquote-end blockquote-paragraph lists], :as state}])), :doc "Check for change in blockquote states and add start or end tags.\n  Closing a blockquote with a list in it is a bit more complex,\n  as the list is not closed until the following blank line."}, :name markdown.transformers/blockquote-2, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 19, :method-params ([text p__32034]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 262, :end-line 262, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [blockquote-start blockquote-end blockquote-paragraph lists], :as state}])), :doc "Check for change in blockquote states and add start or end tags.\n  Closing a blockquote with a list in it is a bit more complex,\n  as the list is not closed until the following blank line."}, empty-line {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 44, :column 7, :end-line 44, :end-column 17, :arglists (quote ([text {:keys [code codeblock], :as state}]))}, :name markdown.transformers/empty-line, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 17, :method-params ([text p__31990]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [code codeblock], :as state}]))}, open-paragraph {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 130, :column 7, :end-line 130, :end-column 21, :arglists (quote ([text {:keys [eof heading inline-heading temp hr code lists blockquote paragraph last-line-empty?], :as state}]))}, :name markdown.transformers/open-paragraph, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 21, :method-params ([text p__32014]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [eof heading inline-heading temp hr code lists blockquote paragraph last-line-empty?], :as state}]))}, footer {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 279, :column 7, :end-line 279, :end-column 13, :arglists (quote ([footnotes]))}, :name markdown.transformers/footer, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 13, :method-params ([footnotes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 279, :end-line 279, :max-fixed-arity 1, :fn-var true, :arglists (quote ([footnotes]))}, heading? {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 33, :column 7, :end-line 33, :end-column 15, :arglists (quote ([text type]))}, :name markdown.transformers/heading?, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 15, :method-params ([text type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text type]))}, set-line-state {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 116, :column 7, :end-line 116, :end-column 21, :arglists (quote ([text {:keys [inline-heading], :as state}]))}, :name markdown.transformers/set-line-state, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 21, :method-params ([text p__32011]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [inline-heading], :as state}]))}, clear-line-state {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 122, :column 7, :end-line 122, :end-column 23, :arglists (quote ([text state]))}, :name markdown.transformers/clear-line-state, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 23, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, code {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 158, :column 7, :end-line 158, :end-column 11, :arglists (quote ([text {:keys [eof lists code codeblock], :as state}]))}, :name markdown.transformers/code, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 11, :method-params ([text p__32021]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [eof lists code codeblock], :as state}]))}, parse-metadata-headers {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 328, :column 7, :end-line 328, :end-column 29, :arglists (quote ([lines-seq])), :doc "Given a sequence of lines from a markdown document, attempt to parse a\n  metadata header if it exists."}, :name markdown.transformers/parse-metadata-headers, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 29, :method-params ([lines-seq]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 328, :end-line 328, :max-fixed-arity 1, :fn-var true, :arglists (quote ([lines-seq])), :doc "Given a sequence of lines from a markdown document, attempt to parse a\n  metadata header if it exists."}, br {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 83, :column 7, :end-line 83, :end-column 9, :arglists (quote ([text {:keys [code lists], :as state}]))}, :name markdown.transformers/br, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 9, :method-params ([text p__32000]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [code lists], :as state}]))}, paragraph-text {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/resources/public/js/out/markdown/transformers.cljc", :line 125, :column 7, :end-line 125, :end-column 21, :arglists (quote ([last-line-empty? text]))}, :name markdown.transformers/paragraph-text, :variadic false, :file "resources/public/js/out/markdown/transformers.cljc", :end-column 21, :method-params ([last-line-empty? text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 2, :fn-var true, :arglists (quote ([last-line-empty? text]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:next-line :codeblock :indented-code :blockquote-paragraph :hr :temp :lists :buf :blockquote-end :clojurescript :inline-heading :else :last-line-empty? :default :frozen-strings :code-style :codeblock-end :skip-next-line? :code :blockquote-start :processed :heading-anchors :eof :paragraph :blockquote :heading}, :order [:code :codeblock :hr :heading :default :buf :next-line :heading-anchors :else :inline-heading :lists :frozen-strings :clojurescript :temp :eof :paragraph :blockquote :last-line-empty? :indented-code :codeblock-end :skip-next-line? :code-style :blockquote-end :blockquote-paragraph :blockquote-start :processed]}, :doc nil}