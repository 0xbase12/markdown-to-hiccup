{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name markdown-to-hiccup.core, :imports nil, :requires {str clojure.string, clojure.string clojure.string, gstr goog.string, goog.string goog.string, hickory.core hickory.core, markdown.core markdown.core}, :cljs.spec/speced-vars [], :uses {md->html markdown.core, as-hiccup hickory.core, parse hickory.core}, :defs {num-partition {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/src/markdown_to_hiccup/core.cljc", :line 78, :column 8, :end-line 78, :end-column 21, :private true, :arglists (quote ([args])), :doc "Accepts a list of keywords and numbers. Any place in which\n  a number does not separate keywords, a zero will be inserted.\n  Returns the arg list as a sequence of keyword -> number pairs\n  nested as lists."}, :private true, :name markdown-to-hiccup.core/num-partition, :variadic false, :file "src/markdown_to_hiccup/core.cljc", :end-column 21, :method-params ([args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([args])), :doc "Accepts a list of keywords and numbers. Any place in which\n  a number does not separate keywords, a zero will be inserted.\n  Returns the arg list as a sequence of keyword -> number pairs\n  nested as lists."}, decode {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/src/markdown_to_hiccup/core.cljc", :line 16, :column 7, :end-line 16, :end-column 13, :arglists (quote ([s]))}, :name markdown-to-hiccup.core/decode, :variadic false, :file "src/markdown_to_hiccup/core.cljc", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, html-encodings {:name markdown-to-hiccup.core/html-encodings, :file "src/markdown_to_hiccup/core.cljc", :line 8, :column 1, :end-line 8, :end-column 20, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/src/markdown_to_hiccup/core.cljc", :line 8, :column 6, :end-line 8, :end-column 20}, :tag cljs.core/IMap}, keywords? {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/src/markdown_to_hiccup/core.cljc", :line 61, :column 8, :end-line 61, :end-column 17, :private true, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :private true, :name markdown-to-hiccup.core/keywords?, :variadic true, :file "src/markdown_to_hiccup/core.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, same-length? {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/src/markdown_to_hiccup/core.cljc", :line 102, :column 8, :end-line 102, :end-column 20, :private true, :arglists (quote ([coll-a coll-b]))}, :private true, :name markdown-to-hiccup.core/same-length?, :variadic false, :file "src/markdown_to_hiccup/core.cljc", :end-column 20, :method-params ([coll-a coll-b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll-a coll-b]))}, dec-front {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/src/markdown_to_hiccup/core.cljc", :line 65, :column 8, :end-line 65, :end-column 17, :private true, :arglists (quote ([kw-pairs])), :doc "Accepts a list of [keyword count] pairs, and subtracts the count\n   of the first pair. If that count becomes negative, dec-front returns\n   the rest of the list. Otherwise, it returns the list with the new\n   count value for the first pair."}, :private true, :name markdown-to-hiccup.core/dec-front, :variadic false, :file "src/markdown_to_hiccup/core.cljc", :end-column 17, :method-params ([kw-pairs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([kw-pairs])), :doc "Accepts a list of [keyword count] pairs, and subtracts the count\n   of the first pair. If that count becomes negative, dec-front returns\n   the rest of the list. Otherwise, it returns the list with the new\n   count value for the first pair."}, md->hiccup {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/src/markdown_to_hiccup/core.cljc", :line 24, :column 7, :end-line 24, :end-column 17, :arglists (quote ([md-str params] [md-str])), :doc "Accepts a markdown string and returns a hiccup data structure converted from that markdown.\n  Also accepts an optional params map. Use the :encode? boolean key to specify whether\n  or not you want html escape characters to be encoded. Example:\n    (md->hiccup \"#Title\" {:encode? true})", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([md-str params] [md-str]), :arglists ([md-str params] [md-str]), :arglists-meta (nil nil)}}, :name markdown-to-hiccup.core/md->hiccup, :variadic false, :file "src/markdown_to_hiccup/core.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([md-str params] [md-str]), :arglists ([md-str params] [md-str]), :arglists-meta (nil nil)}, :method-params ([md-str params] [md-str]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists ([md-str params] [md-str]), :doc "Accepts a markdown string and returns a hiccup data structure converted from that markdown.\n  Also accepts an optional params map. Use the :encode? boolean key to specify whether\n  or not you want html escape characters to be encoded. Example:\n    (md->hiccup \"#Title\" {:encode? true})"}, hiccup-in {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/src/markdown_to_hiccup/core.cljc", :line 132, :column 7, :end-line 132, :end-column 16, :arglists (quote ([hiccup & kw-pairs])), :doc "Accepts a hiccup data structure and any series of args in keyword, index order.\n   Each keyword represents a hiccup element, and the paired index is which element at that level hiccup-in will look in.\n   If no number proceeds a keyword, hiccup-in will find the first element with that keyword.\n   Returns the nested hiccup vector identified by the keywords.\n   Example: (hiccup-in hiccup :html :body :div 0 :h1 2 :p)", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(hiccup kw-pairs)], :arglists ([hiccup & kw-pairs]), :arglists-meta (nil)}}, :name markdown-to-hiccup.core/hiccup-in, :variadic true, :file "src/markdown_to_hiccup/core.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(hiccup kw-pairs)], :arglists ([hiccup & kw-pairs]), :arglists-meta (nil)}, :method-params [(hiccup kw-pairs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 1, :fn-var true, :arglists ([hiccup & kw-pairs]), :doc "Accepts a hiccup data structure and any series of args in keyword, index order.\n   Each keyword represents a hiccup element, and the paired index is which element at that level hiccup-in will look in.\n   If no number proceeds a keyword, hiccup-in will find the first element with that keyword.\n   Returns the nested hiccup vector identified by the keywords.\n   Example: (hiccup-in hiccup :html :body :div 0 :h1 2 :p)"}, component {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/src/markdown_to_hiccup/core.cljc", :line 142, :column 7, :end-line 142, :end-column 16, :arglists (quote ([hiccup])), :doc "Accepts hiccup and returns the same hiccup only\n   without the :html, :head, and :body elements. Useful\n   if you want to nest your markdown hiccup in existing\n   hiccup data structures."}, :name markdown-to-hiccup.core/component, :variadic false, :file "src/markdown_to_hiccup/core.cljc", :end-column 16, :method-params ([hiccup]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hiccup])), :doc "Accepts hiccup and returns the same hiccup only\n   without the :html, :head, and :body elements. Useful\n   if you want to nest your markdown hiccup in existing\n   hiccup data structures."}, decode-reducer {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/src/markdown_to_hiccup/core.cljc", :line 13, :column 7, :end-line 13, :end-column 21, :arglists (quote ([acc [match replace]]))}, :name markdown-to-hiccup.core/decode-reducer, :variadic false, :file "src/markdown_to_hiccup/core.cljc", :end-column 21, :method-params ([acc p__32259]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([acc [match replace]]))}, hicc-in {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/src/markdown_to_hiccup/core.cljc", :line 42, :column 7, :end-line 42, :end-column 14, :arglists (quote ([hiccup & kws])), :doc "NOTE: please use hiccup-in for better access to nested hiccup.\n  Accepts a hiccup data structure and a keyword representing\n  an html element tag (e.g. :body) and returns the first nested\n  hiccup vector identified by the keyword.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(hiccup kws)], :arglists ([hiccup & kws]), :arglists-meta (nil)}}, :name markdown-to-hiccup.core/hicc-in, :variadic true, :file "src/markdown_to_hiccup/core.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(hiccup kws)], :arglists ([hiccup & kws]), :arglists-meta (nil)}, :method-params [(hiccup kws)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists ([hiccup & kws]), :doc "NOTE: please use hiccup-in for better access to nested hiccup.\n  Accepts a hiccup data structure and a keyword representing\n  an html element tag (e.g. :body) and returns the first nested\n  hiccup vector identified by the keyword."}, get-nested-hiccup {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Clojure/markdown-to-hiccup/src/markdown_to_hiccup/core.cljc", :line 107, :column 8, :end-line 107, :end-column 25, :private true, :arglists (quote ([hiccup kw-pairs])), :doc "Recursive helper function for hiccup-in."}, :private true, :name markdown-to-hiccup.core/get-nested-hiccup, :variadic false, :file "src/markdown_to_hiccup/core.cljc", :end-column 25, :method-params ([hiccup kw-pairs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 2, :fn-var true, :arglists (quote ([hiccup kw-pairs])), :doc "Recursive helper function for hiccup-in."}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:else :encode? :div :body}, :order [:encode? :else :body :div]}, :doc nil}