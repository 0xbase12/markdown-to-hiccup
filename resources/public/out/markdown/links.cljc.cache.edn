{:rename-macros {}, :renames {}, :use-macros {italics markdown.common, bold markdown.common, freeze-string markdown.common, gen-token markdown.common, strong markdown.common, em markdown.common, strikethrough markdown.common}, :excludes #{}, :name markdown.links, :imports nil, :requires {string clojure.string, clojure.string clojure.string, markdown.common markdown.common}, :cljs.spec/speced-vars [], :uses {italics markdown.common, bold markdown.common, freeze-string markdown.common, gen-token markdown.common, strong markdown.common, em markdown.common, strikethrough markdown.common}, :defs {replace-all-footnote-links {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 161, :column 7, :end-line 161, :end-column 33, :arglists (quote ([text {:keys [footnotes], :as state}]))}, :name markdown.links/replace-all-footnote-links, :variadic false, :file "resources/public/out/markdown/links.cljc", :end-column 33, :method-params ([text p__34344]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [footnotes], :as state}]))}, make-image-reference {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 185, :column 7, :end-line 185, :end-column 27, :arglists (quote ([src alt title]))}, :name markdown.links/make-image-reference, :variadic false, :file "resources/public/out/markdown/links.cljc", :end-column 27, :method-params ([src alt title]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 3, :fn-var true, :arglists (quote ([src alt title]))}, href {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 13, :column 7, :end-line 13, :end-column 11, :arglists (quote ([text link state]))}, :name markdown.links/href, :variadic false, :file "resources/public/out/markdown/links.cljc", :end-column 11, :method-params ([text link state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 3, :fn-var true, :arglists (quote ([text link state]))}, img {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 22, :column 7, :end-line 22, :end-column 10, :arglists (quote ([alt url state & [title]])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(alt url state [title])], :arglists ([alt url state & [title]]), :arglists-meta (nil)}}, :name markdown.links/img, :variadic true, :file "resources/public/out/markdown/links.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(alt url state [title])], :arglists ([alt url state & [title]]), :arglists-meta (nil)}, :method-params [(alt url state [title])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 3, :fn-var true, :arglists ([alt url state & [title]])}, parse-footnote-link {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 150, :column 7, :end-line 150, :end-column 26, :arglists (quote ([line footnotes]))}, :name markdown.links/parse-footnote-link, :variadic false, :file "resources/public/out/markdown/links.cljc", :end-column 26, :method-params ([line footnotes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 2, :fn-var true, :arglists (quote ([line footnotes]))}, implicit-reference-link {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 143, :column 7, :end-line 143, :end-column 30, :arglists (quote ([text state]))}, :name markdown.links/implicit-reference-link, :variadic false, :file "resources/public/out/markdown/links.cljc", :end-column 30, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, parse-links {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 113, :column 7, :end-line 113, :end-column 18, :arglists (quote ([references links]))}, :name markdown.links/parse-links, :variadic false, :file "resources/public/out/markdown/links.cljc", :end-column 18, :method-params ([references links]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 2, :fn-var true, :arglists (quote ([references links]))}, footnote-link {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 173, :column 7, :end-line 173, :end-column 20, :arglists (quote ([text {:keys [code codeblock footnotes], :as state}]))}, :name markdown.links/footnote-link, :variadic false, :file "resources/public/out/markdown/links.cljc", :end-column 20, :method-params ([text p__34349]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [code codeblock footnotes], :as state}]))}, reference-link {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 132, :column 7, :end-line 132, :end-column 21, :arglists (quote ([text {:keys [code codeblock references], :as state}]))}, :name markdown.links/reference-link, :variadic false, :file "resources/public/out/markdown/links.cljc", :end-column 21, :method-params ([text p__34341]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [code codeblock references], :as state}]))}, image-reference-link {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 189, :column 7, :end-line 189, :end-column 27, :arglists (quote ([text {:keys [references], :as state}]))}, :name markdown.links/image-reference-link, :variadic false, :file "resources/public/out/markdown/links.cljc", :end-column 27, :method-params ([text p__34355]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 189, :end-line 189, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [references], :as state}]))}, make-link {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 47, :column 7, :end-line 47, :end-column 16, :arglists (quote ([img?]))}, :name markdown.links/make-link, :variadic false, :file "resources/public/out/markdown/links.cljc", :end-column 16, :method-params ([img?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([img?]))}, replace-footnote-link {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 156, :column 7, :end-line 156, :end-column 28, :arglists (quote ([footnotes footnote]))}, :name markdown.links/replace-footnote-link, :variadic false, :file "resources/public/out/markdown/links.cljc", :end-column 28, :method-params ([footnotes footnote]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 2, :fn-var true, :arglists (quote ([footnotes footnote]))}, replace-reference-link {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 100, :column 7, :end-line 100, :end-column 29, :arglists (quote ([references reference]))}, :name markdown.links/replace-reference-link, :variadic false, :file "resources/public/out/markdown/links.cljc", :end-column 29, :method-params ([references reference]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([references reference]))}, handle-img-link {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 30, :column 7, :end-line 30, :end-column 22, :arglists (quote ([xs state]))}, :name markdown.links/handle-img-link, :variadic false, :file "resources/public/out/markdown/links.cljc", :end-column 22, :method-params ([xs state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists (quote ([xs state]))}, parse-reference {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 88, :column 7, :end-line 88, :end-column 22, :arglists (quote ([reference start]))}, :name markdown.links/parse-reference, :variadic false, :file "resources/public/out/markdown/links.cljc", :end-column 22, :method-params ([reference start]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([reference start]))}, footnote {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 147, :column 7, :end-line 147, :end-column 15, :arglists (quote ([text]))}, :name markdown.links/footnote, :variadic false, :file "resources/public/out/markdown/links.cljc", :end-column 15, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, parse-reference-link {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 94, :column 7, :end-line 94, :end-column 27, :arglists (quote ([line references]))}, :name markdown.links/parse-reference-link, :variadic false, :file "resources/public/out/markdown/links.cljc", :end-column 27, :method-params ([line references]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 2, :fn-var true, :arglists (quote ([line references]))}, reference {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 85, :column 7, :end-line 85, :end-column 16, :arglists (quote ([text]))}, :name markdown.links/reference, :variadic false, :file "resources/public/out/markdown/links.cljc", :end-column 16, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, link {:name markdown.links/link, :file "resources/public/out/markdown/links.cljc", :line 82, :column 1, :end-line 82, :end-column 10, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 82, :column 6, :end-line 82, :end-column 10}, :tag any}, freeze-links {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 119, :column 7, :end-line 119, :end-column 19, :arglists (quote ([references text state]))}, :name markdown.links/freeze-links, :variadic false, :file "resources/public/out/markdown/links.cljc", :end-column 19, :method-params ([references text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 3, :fn-var true, :arglists (quote ([references text state]))}, encode-links {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 105, :column 7, :end-line 105, :end-column 19, :arglists (quote ([links i]))}, :name markdown.links/encode-links, :variadic false, :file "resources/public/out/markdown/links.cljc", :end-column 19, :method-params ([links i]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 2, :fn-var true, :arglists (quote ([links i]))}, image {:name markdown.links/image, :file "resources/public/out/markdown/links.cljc", :line 83, :column 1, :end-line 83, :end-column 11, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 83, :column 6, :end-line 83, :end-column 11}, :tag any}, process-link-title {:protocol-inline nil, :meta {:file "/Users/mpcarolin/Source/markdown-to-hiccup/resources/public/out/markdown/links.cljc", :line 40, :column 7, :end-line 40, :end-column 25, :arglists (quote ([title state]))}, :name markdown.links/process-link-title, :variadic false, :file "resources/public/out/markdown/links.cljc", :end-column 25, :method-params ([title state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([title state]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:codeblock :footnotes :unprocessed :else :frozen-strings :references :next-fn-id :code :processed :reference-links?}, :order [:code :codeblock :else :frozen-strings :references :unprocessed :next-fn-id :footnotes :processed :reference-links?]}, :doc nil}